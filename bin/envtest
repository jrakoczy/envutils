#!/usr/bin/env sh

print_help() {
    printf "USAGE: envtest [<option>] <target> [<links>]

        OPERANDS:
            <target> — either a file or a directory; if it's a directory
                       all its content will be sym-linked recursively.
            <links> — either a link name or a directory where all links
                       reside.

        DESCRIPTION:
            Inteligentlly sym-links <links> to <target>. If the <links>
            operand is not present, it's inferred from <target>.
            If <target> is inside a Git directory, then this directory is
            treated as a sym-linking root — its path is replaced with
            \$HOME during the linking process. This allows you to
            convenietly test your dot-files that are kept in a separate Git directory.

        OPTIONS:
            -h
            -i — do not check whether the <target> path is within a Git directory.

        EXAMPLES:

            The content of <target> is sym-linked directly from within
            /absolute/links-directory (it doesn't matter whether <target>
            is within a Git directory):

                envtest /absolute/target-directory /absolute/links-directory


            <target> is directory in a non-Git directory. In such case
            its content is symlinked from wihtin \$HOME/target-directory.

                envtest /absolute/path/target-directory

            <target> is a regular file in a non-Git directory. It's
            sym-linked to \$HOME/relative/target-file:

                envtest relative/target-file

            <target> is a directory in a non-Git directory. Its content is
            sym-linked from within \$HOME/relative/target-directory:

                envtest relatve/target-directory

            <target> is a directory in a Git directory. Let's assume the
            <target> absoulte path is
            /git-directory/foo/relative/target-directory. In such case all
            its content is sym-linked from within \$HOME/foo/relative/target-
            directory:

                envtest relative/target-directory

            The same applies to absolute paths that point to a file or a
            directory in a Git directory. The content of <target> is sym-
            linked from within \$HOME/foo/target-directory:

                envtest /absolute/git-directory/foo/target-directory
        "
}

is_absolute() {
    [[ "$1" = /* ]]
}

absolute_path() {
    is_absolute "$1" && printf "$1" ||  printf "$(pwd)/$1"
}

git_path() {
    git -C "$(dirname "$1")" rev-parse --show-toplevel 2> /dev/null
}

subtract_git_path() {
    local path="$(absolute_path $1)"
    printf "${path#$2}"
}

absolute_to_relative() {
    is_absolute "$1" && printf "$(basename $1)" || printf "$1"
}

target_relative_path() {
   ! $1 && \
       local git_dir="$(git_path "$2")"  && \
        subtract_git_path "$2" "$git_dir/"  || \
        absolute_to_relative "$2"
}

links_path() {
    printf "$HOME/$(target_relative_path "$1" "$2")"
}

link() {
    local path="$(absolute_path "$1")"
    [[ "$path" -ef "$2" ]] && \
        printf "You're trying to create a circular symlink.\n" && \
        exit 1
    mkdir -p "$(dirname "$2")"
    cp -asfr "$path" "$2"
}

ignore_git=false

while getopts 'hi' opt
do
    case "$opt" in
        'h')
            print_help
            exit 0
            ;;
        'i')
            ignore_git=true
            ;;
    esac
done

target="${@:OPTIND:1}"
links="${@:OPTIND+1:1}"

[ -z "$links" ] && \
    link "$target" "$(links_path "$ignore_git" "$target")" || \
    link "$target" "$links"
