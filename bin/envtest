#!/usr/bin/env sh

print_help() {
    printf "USAGE: envtest [<option>] <source> [<target>]

        OPERANDS:
            <source> — either a file or a directory; if it's a directory,
                       all its content will be sym-linked recursively.
            <target> — either a link name or a directory where all links

        DESCRIPTION:
            Inteligentlly sym-links <source> to <target>. If the <target>
            operand is not present, it's inferred from <source>.
            If <source> is inside a Git directory, then this directory is
            treated as a sym-linking root — its path is replaced with
            \$HOME during the linking process. This allows you to
            convenietly test your dot-files that are kept in a separate Git directory.

        OPTIONS:
            -h
            -i — do not test whether the <source> path is within a Git directory.

        EXAMPLES:

            The content of <source> is sym-linked directly from within
            /absolute/target-directory (it doesn't matter whether <source>
            is within a Git directory):

                envtest /absolute/source-directory /absolute/target-directory


            <source> is directory in a non-Git directory. In such case
            its content is symlinked from wihtin \$HOME/source-directory.

                envtest /absolute/path/source-directory

            <source> is a regular file in a non-Git directory. It's
            sym-linked to \$HOME/source-file:

                envtest relative/source-file

            <source> is a directory in a non-Git directory. Its content is
            sym-linked from within \$HOME/relative/source-directory:

                envtest relatve/source-directory

            <source> is a directory in a Git directory. Let's assume the
            <source> absoulte path is
            /git-directory/foo/relative/source-directory. In such case all
            its content is sym-linked from within $HOME/foo/relative/source-
            directory:

                envtest relative/source-directory

            The same applies to absolute paths that point to a file or a
            directory in a Git directory. The content of <source> is sym-
            linked from within \$HOME/foo/source-directory:

                envtest /absolute/git-directory/foo/source-directory
        "
}

is_absolute() {
    [[ "$1" = /* ]]
}

abosulute_path() {
    is_absolute "$1" && printf "$1" ||  printf "$(pwd)/$1"
}

subtract_git_path() {
    path="$(absolute_path $1)"
    printf "${path#$2}"
}

absolute_to_relative() {
    is_absolute "$1" && printf "$(basename $1)" || printf "$1"
}

# TODO non-git/git/relative
source_relative_path() {
   $1 && \
       git_dir="$(git rev-parse --show-toplevel 2> /dev/null)" && \
        subtract_git_path "$2" "$git_dir"  || \
        absolute_to_relative "$2"
}

source_path() {
    [ -d "$1" ] && printf "${1%/}/*" || printf "$1"
}

target_path() {
    printf "$HOME/$(source_relative_path "$1" "$2")"
}

link() {
    cp -asf "$(source_path "$1")" "$2"
}

ignore_git=false

while getopts 'hi' opt
do
    case "$opt" in
        'h')
            print_help
            exit 0
            ;;
        'i')
            ignore_git=true
            ;;
    esac
done

src="${@:OPTIND:1}"
target="${@:OPTIND+1:1}"

[ -z "$target" ] && \
    link "$(source_path $src)" "$(target_path "$ignore_git" "$src")" || \
    link "$(source_path $src)" "$target"
